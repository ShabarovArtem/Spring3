init-method будет вызываться для каждого новосозданого бина
для этого бина destroy-method вызываться не будет
необходимо самостоятельно писать код для закрытия. освобождения ресурсов

Аннотации - это специальны комментарии/метки/метаданные, для
передачи определённой информации (@Override)

Процесс состоитих 2-х этапов
1.сканирование классов и поиск аннотации @Component
2. Создание (регистрация) бинав спринг конейнер

@Autowired ищет подходящие типы по бину и внедряет зависимость
@Qualifier если больше 1 бина, пишем сначала @Autowired, потом @Qualifier(), в скопках id нужного бина
для Field
@Autowired
    @Qualifier("dog")
    private Pet pet;
для Setter
    @Autowired
    @Qualifier("dog")
    public void setPet(Pet pet){
    this.pet = pet; }
для Constructor
    @Autowired
    public Person(@Qualifier("dog")){
    this.pet = pet;
    }

для внедрения строк и других значений используется аннотация @Value

Аннотация @Configuration означает ято данный класс является конфигурацией
С помощью аннотации @ComponentScan мф показываем, какой пакет нужно сканировать на наличиебинов и разных аннотаций

@PropertySource указывает на проперти файл откуда можем использовать значения
когда мы не используем xml файл а создаем класс и там все указываем

inversion of control
xml file устаревший
Annotations + xml file(малого размера, отвечает за сканирование пакета и
прописания пути к нашему property файлу) современный
java code современный

AOP - aspect oriented programming - парадигма программирования,
основанная на идее разделения основного служебного функционала
служебные функционал записывается в Aspect классы


